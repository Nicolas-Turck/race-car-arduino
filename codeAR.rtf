{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh15480\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs20 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // connect motor controller pins to Arduino digital pins\
// motor one\
int enA = 10;\
int in1 = 9;\
int in2 = 8;\
// motor two\
int enB = 5;\
int in3 = 2;\
int in4 = 3;\
\'a0\
const int Echo_in_pin = 6;\
const int Trig_out_pin = 7;\
\'a0\
const double Speed_sound = 340.0e-3; // Vitesse du son (mm/us)\
\'a0\
float Dist_mm=0.0;\
int cmpt = 0;\
int cmpt_d = 0;\
int cmpt_g = 1;\
\'a0\
void setup()\
\{\
\'a0 // set all the motor control pins to outputs\
\'a0 pinMode(enA, OUTPUT);\
\'a0 pinMode(enB, OUTPUT);\
\'a0 pinMode(in1, OUTPUT);\
\'a0 pinMode(in2, OUTPUT);\
\'a0 pinMode(in3, OUTPUT);\
\'a0 pinMode(in4, OUTPUT);\
\'a0\
\'a0 pinMode(Trig_out_pin, OUTPUT);\
\'a0 pinMode(Echo_in_pin, INPUT);\
\'a0 digitalWrite(Trig_out_pin, LOW);\
\'a0\
\'a0\'a0// Init interface s\'e9rie\
\'a0\'a0Serial.begin(115200);\
\'a0\
\'a0 pinMode(13, OUTPUT);\
\}\
\'a0\
void demoOne()\
\{\
\'a0 // this function will run the motors in both directions at a fixed speed\
\'a0 // turn on motor A\
\'a0 digitalWrite(in1, HIGH);\
\'a0 digitalWrite(in2, LOW);\
\'a0 // set speed to 200 out of possible range 0~255\
\'a0 analogWrite(enA, 200);\
\'a0 // turn on motor B\
\'a0 digitalWrite(in3, HIGH);\
\'a0 digitalWrite(in4, LOW);\
\'a0 // set speed to 200 out of possible range 0~255\
\'a0 analogWrite(enB, 200);\
\'a0 delay(2000);\
\'a0 // now change motor directions\
\'a0 digitalWrite(in1, LOW);\
\'a0 digitalWrite(in2, HIGH);\'a0\
\'a0\'a0digitalWrite(in3, LOW);\
\'a0 digitalWrite(in4, HIGH);\
\'a0\'a0delay(2000);\
\'a0 // now turn off motors\
\'a0 digitalWrite(in1, LOW);\
\'a0 digitalWrite(in2, LOW);\'a0\
\'a0\'a0digitalWrite(in3, LOW);\
\'a0 digitalWrite(in4, LOW);\
\}\
\'a0\
void demoTwo()\
\{\
\'a0 // this function will run the motors across the range of possible speeds\
\'a0 // note that maximum speed is determined by the motor itself and the operating voltage\
\'a0 // the PWM values sent by analogWrite() are fractions of the maximum speed possible\
\'a0\'a0// by your hardware\
\'a0 // turn on motors\
\'a0 digitalWrite(in1, LOW);\
\'a0 digitalWrite(in2, HIGH);\'a0\
\'a0\'a0digitalWrite(in3, LOW);\
\'a0 digitalWrite(in4, HIGH);\
\'a0\'a0// accelerate from zero to maximum speed\
\'a0 for (int i = 0; i < 256; i++)\
\'a0 \{\
\'a0\'a0\'a0 analogWrite(enA, i);\
\'a0\'a0\'a0 analogWrite(enB, i);\
\'a0\'a0\'a0 delay(20);\
\'a0 \}\
\'a0\'a0// decelerate from maximum speed to zero\
\'a0 for (int i = 255; i >= 0; --i)\
\'a0 \{\
\'a0\'a0\'a0 analogWrite(enA, i);\
\'a0\'a0\'a0 analogWrite(enB, i);\
\'a0\'a0\'a0 delay(20);\
\'a0 \}\
\'a0\'a0// now turn off motors\
\'a0 digitalWrite(in1, LOW);\
\'a0 digitalWrite(in2, LOW);\'a0\
\'a0\'a0digitalWrite(in3, LOW);\
\'a0 digitalWrite(in4, LOW);\'a0\
\}\
\'a0\
void avancer()\
\{\
\'a0\'a0\'a0 // this function will run the motors in both directions at a fixed speed\
\'a0\'a0\'a0 // turn on motor A\
\'a0\'a0\'a0 digitalWrite(in1, LOW);\
\'a0\'a0\'a0 digitalWrite(in2, HIGH);\
\'a0\'a0\'a0 // set speed to 200 out of possible range 0~255\
\'a0\'a0\'a0 analogWrite(enA, 200);\
\'a0\'a0\'a0 // turn on motor B\
\'a0\'a0\'a0 digitalWrite(in3, HIGH);\
\'a0\'a0\'a0 digitalWrite(in4, LOW);\
\'a0\'a0\'a0 // set speed to 200 out of possible range 0~255\
\'a0\'a0\'a0 analogWrite(enB, 180);\
\}\
\'a0\
void arriere()\
\{\
\'a0\'a0\'a0 // this function will run the motors in both directions at a fixed speed\
\'a0\'a0\'a0 // turn on motor A\
\'a0\'a0\'a0 digitalWrite(in1, HIGH);\
\'a0\'a0\'a0 digitalWrite(in2, LOW);\
\'a0\'a0\'a0 // set speed to 200 out of possible range 0~255\
\'a0\'a0\'a0 analogWrite(enA, 200);\
\'a0\'a0\'a0 // turn on motor B\
\'a0\'a0\'a0 digitalWrite(in3, LOW);\
\'a0\'a0\'a0 digitalWrite(in4, HIGH);\
\'a0\'a0\'a0 // set speed to 200 out of possible range 0~255\
\'a0\'a0\'a0 analogWrite(enB, 200);\
\}\
\'a0\
void tournerG()\
\{\
\'a0\'a0\'a0 // this function will run the motors in both directions at a fixed speed\
\'a0\'a0\'a0 // turn on motor A\
\'a0\'a0\'a0 digitalWrite(in1, HIGH);\
\'a0\'a0\'a0 digitalWrite(in2, LOW);\
\'a0\'a0\'a0 // set speed to 200 out of possible range 0~255\
\'a0\'a0\'a0 analogWrite(enA, 120);\
\'a0\'a0\'a0 // turn on motor B\
\'a0\'a0\'a0 digitalWrite(in3, HIGH);\
\'a0\'a0\'a0 digitalWrite(in4, LOW);\
\'a0\'a0\'a0 // set speed to 200 out of possible range 0~255\
\'a0\'a0\'a0 analogWrite(enB, 122);\
\}\
\'a0\
void tournerD()\
\{\
\'a0\'a0\'a0 // this function will run the motors in both directions at a fixed speed\
\'a0\'a0\'a0 // turn on motor A\
\'a0\'a0\'a0 digitalWrite(in1, LOW);\
\'a0\'a0\'a0 digitalWrite(in2, HIGH);\
\'a0\'a0\'a0 // set speed to 200 out of possible range 0~255\
\'a0\'a0\'a0 analogWrite(enA, 180);\
\'a0\'a0\'a0 // turn on motor B\
\'a0\'a0\'a0 digitalWrite(in3, LOW);\
\'a0\'a0\'a0 digitalWrite(in4, HIGH);\
\'a0\'a0\'a0 // set speed to 200 out of possible range 0~255\
\'a0\'a0\'a0 analogWrite(enB, 198);\
\}\
\'a0\
void arret()\
\{\
\'a0 // turn off motor A and B\
\'a0 digitalWrite(in1, LOW);\
\'a0 digitalWrite(in2, LOW);\
\'a0 digitalWrite(in3, LOW);\
\'a0 digitalWrite(in4, LOW);\
\}\
\'a0\
float GetDisCM(int Echo_in_pinn, int Trig_out_pinn, double Speed_soundd)\
\'a0 \{\
\'a0\'a0\'a0 float Dist_milm=0.0;\
\'a0\'a0\'a0 long HC_val=0;\
\'a0\
\'a0\'a0\'a0 // D\'e9clanchement mesure avec l'envoie d'une impulsion de 10\'b5s\
\'a0\'a0\'a0 digitalWrite(Trig_out_pin, HIGH);\
\'a0\'a0\'a0 delayMicroseconds(10);\
\'a0\'a0\'a0 digitalWrite(Trig_out_pin, LOW);\
\'a0\
\'a0\'a0\'a0 // Lecture du temps aller/retour de l'onde\
\'a0\'a0\'a0\'a0HC_val = pulseIn(Echo_in_pin, HIGH, 30000);\
\'a0\
\'a0\'a0\'a0 // Calcul de distance d(mm), V=d/t==> v*t\
\'a0\'a0\'a0\'a0// Le coefficnet 2 pour la distance aller\
\'a0\'a0\'a0 Dist_milm = (HC_val/2.0) * Speed_sound;\
\'a0\
\'a0\'a0\'a0 return Dist_milm;\
\'a0 \}\
\'a0\
void loop()\
\{\
\'a0 /*demoOne();\
\'a0 delay(1000);*/\
\'a0 /*demoTwo();\
\'a0 delay(1000);*/\
\'a0\
\'a0 if(cmpt_d == 0)\
\'a0 \{\
\'a0\'a0\'a0 cmpt_d = 1;\
\'a0\'a0\'a0 cmpt_g = 0;\
\'a0 \}\
\'a0 else\
\'a0 \{\
\'a0\'a0\'a0 cmpt_d = 0;\
\'a0\'a0\'a0 cmpt_g = 1;\
\'a0 \}\
\'a0\
\'a0\'a0/* Mesure de la distance */\
\'a0\'a0Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound); // Valeur brute\
\'a0\'a0//Dist_mm=GetMean(8,\'a0 Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound); // Valeur moyenne\
\'a0\'a0delay(500);\
\'a0 for(int i=0; i<10; i++)\
\'a0 \{\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound); // Valeur brute\
\'a0\'a0\'a0\'a0if(Dist_mm == 0 || Dist_mm > 350)\{\
\'a0\'a0\'a0\'a0\'a0 avancer();\
\'a0\'a0\'a0\'a0\'a0 delay(200);\
\'a0\'a0\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0\'a0\'a0 \}\
\'a0\'a0\'a0 else\
\'a0\'a0\'a0 \{\
\'a0\'a0\'a0\'a0\'a0 arret();\
\'a0\'a0\'a0\'a0\'a0 delay(200);\
\'a0\'a0\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0\'a0\'a0 \}\
\'a0\'a0\'a0 cmpt = cmpt + 1;\
\'a0 \}\
\'a0\
\'a0 if(cmpt_d == 1)\{\
\'a0\'a0\'a0 tournerD();\
\'a0\'a0\'a0 delay(450);\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0\'a0\'a0 arret();\
\'a0\'a0\'a0 delay(300);\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0\'a0\'a0 tournerD();\
\'a0\'a0\'a0 delay(250);\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0\'a0\'a0 arret();\
\'a0\'a0\'a0 delay(200);\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0 \}\
\'a0\
\'a0 if(cmpt_g == 1)\{\
\'a0\'a0\'a0 tournerG();\
\'a0\'a0\'a0 delay(450);\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0\'a0\'a0 arret();\
\'a0\'a0\'a0 delay(300);\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_ out_pin,\'a0 Speed_sound);\
\'a0\'a0\'a0 tournerG();\
\'a0\'a0\'a0 delay(375);\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0\'a0\'a0 arret();\
\'a0\'a0\'a0 delay(200);\
\'a0\'a0\'a0 Dist_mm=GetDisCM( Echo_in_pin,\'a0 Trig_out_pin,\'a0 Speed_sound);\
\'a0 \}\
\'a0\
\'a0 /*avancer();\'a0\
\'a0\'a0delay(4000);\
\'a0\
\'a0\'a0arret();\
\'a0 delay(3000);\
\'a0\
\'a0\'a0arriere();\'a0\
\'a0\'a0delay(4000);\
\'a0\
\'a0 arret();\
\'a0 delay(3000);*/\
\'a0\
\'a0\'a0/*tournerD();\
\'a0 delay(330);\
\'a0 arret();\
\'a0 delay(2000);\
\'a0 tournerD();\
\'a0 delay(330);\
\'a0 arret();\
\'a0 delay(2000);\
\'a0\
\'a0 tournerG();\
\'a0 delay(330);\
\'a0 arret();\
\'a0 delay(2000);\
\'a0 tournerG();\
\'a0 delay(330);\
\'a0 arret();\
\'a0 delay(2000);*/\
\'a0\
\}\
\'a0\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\
}